require! <[fs LiveScript nephrite stylus esprima glob md5 escodegen]>
# {exec} = require 'child_process'
cjs = require 'commonjs-everywhere'

ls = -> ["#it/#file" for file in fs.readdirSync it]

##########
# CONFIG #
##########
outfile = \wowboardhelpers.user.js
metadata = slurp \metadata.js


compile-styles = ->
  # XXX kind of relying on lexicographic ordering here
  source = []
  for dir in ls \src
    if fs.existsSync "#dir/styles/"
      for file in ls "#dir/styles/"
        source.push slurp file

  nib source * '\n' .render!

nib = -> stylus it .use require(\nib)!

trycompile = (name, fn) -> ->
  try fn ... catch {message}
    throw new Error "Error #name : #message"


esprima-parse = (src, source) ->
  trycompile('esprima' esprima~parse) src, {+loc, source}

ls-parse = (src, filename) ->
  trycompile('ls' LiveScript~compile) src, {+bare, filename}

en-ast = (fn) -> (src, filename) ->
  esprima-parse fn src.toString!, filename

var css

cjs-options =
  export: null
  node: false
  handlers:
    '.ne': en-ast (src, filename) ->
      src = trycompile('ne' nephrite) src, filename
      ls-parse src, filename

    '.ls': en-ast (it, filename) ->
      it .= replace '%css%' css
      ls-parse it, filename

    '.js': en-ast (it, filename) -> it

cache = {}
processed = {}
entry-point = "src/wowboardhelpers.ls"
last-changed = entry-point

traverseDeps = cjs~traverseDependenciesSync
bundle = cjs~bundle

task \build "build userscript" ->
  css := compile-styles!
  
  console.time "Total CJS"
  new-deps = traverseDeps last-changed, __dirname, cjs-options
  for file of new-deps
    processed[file] = new-deps[file]

  ast = bundle processed, entry-point, __dirname, cjs-options
  console.timeEnd "Total CJS"

  console.time "codegen"
  spit outfile, "// Generated by WBH:Slakefile\n#metadata\n#{escodegen.generate ast}"
  console.timeEnd "codegen"

  say "compiled script to #outfile"

task \watch 'watch for changes and rebuild automatically' !->
  invoke \build

  require('gaze') <[metadata.js src/**/* lib/**/* Slakefile]> !->
    say "Watching files for changes."
    last = Date.now!
    @on "all" !(ev, file) ->
      if Date.now! - last < 1500
        # gaze is fucking broken. Or windows.
        last := Date.now!
        return
      last := Date.now!

      last-changed := file
      file .= slice __dirname.length
      file .= slice 1 if file.0 in <[\ /]>

      if file is "Slakefile"
        say "Slakefile changed."
        process.exit!

      say "Event #ev on #file. Rebuilding."

      invoke 'build'