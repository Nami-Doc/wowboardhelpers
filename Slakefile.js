(function(){
  var fs, LiveScript, nephrite, stylus, esprima, glob, md5, escodegen, exec, cjs, read, blame, outfile, metadata, errinfo, compileStyles, nib, lsParse, enAst, cjsOptions, processed, entryPoint, lastChanged, traverseDeps, bundle, ast, css, cssChange, join$ = [].join;
  fs = require('fs');
  LiveScript = require('LiveScript');
  nephrite = require('nephrite');
  stylus = require('stylus');
  esprima = require('esprima');
  glob = require('glob');
  md5 = require('md5');
  escodegen = require('escodegen');
  exec = require('child_process').exec;
  cjs = require('commonjs-everywhere');
  read = function(it){
    return fs.readFileSync(it);
  };
  blame = function(){
    say.apply(this, arguments);
    return process.exit();
  };
  outfile = 'wowboardhelpers.user.js';
  metadata = slurp('metadata.js');
  errinfo = function(it){
    say(it);
    return console.log('\x07');
  };
  compileStyles = function(){
    var filename;
    filename = 'src/wowboardhelpers.styl';
    return nib(read(filename) + '', {
      filename: filename
    }).render();
  };
  nib = function(){
    return stylus.apply(this, arguments).use(require('nib')());
  };
  lsParse = function(src, filename){
    var message;
    try {
      return LiveScript.compile(src, {
        bare: true,
        filename: filename
      });
    } catch (e$) {
      message = e$.message;
      return errinfo("LiveScript (" + filename + "): " + message);
    }
  };
  enAst = function(fn){
    return function(src, filename){
      var message;
      try {
        return esprima.parse(fn(src.toString(), filename));
      } catch (e$) {
        message = e$.message;
        return errinfo("Esprima (" + filename + "): " + message);
      }
    };
  };
  cjsOptions = {
    'export': null,
    node: false,
    handlers: {
      '.styl': function(){},
      '.ne': enAst(function(src, filename){
        var message;
        try {
          src = nephrite(src, filename);
        } catch (e$) {
          message = e$.message;
          errinfo("Nephrite (" + filename + "): " + message);
        }
        return lsParse(src, filename);
      }),
      '.ls': enAst(lsParse),
      '.js': enAst(function(it, filename){
        return it;
      })
    }
  };
  processed = {};
  entryPoint = "src/wowboardhelpers.ls";
  lastChanged = entryPoint;
  traverseDeps = bind$(cjs, 'traverseDependenciesSync');
  bundle = bind$(cjs, 'bundle');
  task('build', 'build userscript', function(){
    var message, newDeps, file, stack, code;
    if (cssChange || !css) {
      console.time('CSS');
      try {
        css = compileStyles().trim().replace(/\n/g, '\\\n');
      } catch (e$) {
        message = e$.message;
        errinfo("Stylus: " + message);
      }
      console.timeEnd('CSS');
    }
    if (!cssChange) {
      console.time('CJS');
      try {
        newDeps = traverseDeps(lastChanged, __dirname, cjsOptions);
        for (file in newDeps) {
          processed[file] = newDeps[file];
        }
        ast = bundle(processed, entryPoint, __dirname, cjsOptions);
      } catch (e$) {
        message = e$.message, stack = e$.stack;
        errinfo("Compilation: " + message + "\n" + stack);
      }
      console.timeEnd('CJS');
    }
    console.time('gen');
    code = escodegen.generate(ast);
    console.timeEnd('gen');
    spit(outfile, "// Generated by WBH:Slakefile\n" + metadata + "\n" + code.replace('%css%', css));
    say("compiled script to " + outfile);
  });
  task('watch', 'watch for changes and rebuild automatically', function(){
    invoke('build');
    require('gaze')(['metadata.js', 'src/**/*', 'lib/**/*', 'Slakefile'], function(){
      say("Watching files for changes.");
      this.on('all', function(ev, file){
        cssChange = ~file.indexOf('.styl');
        if (ev === 'deleted') {
          return;
        }
        if (!fs.statSync(file).isFile()) {
          return;
        }
        lastChanged = file;
        file = file.slice(__dirname.length + 1);
        if (file === "Slakefile") {
          say("Slakefile changed.");
          process.exit();
        }
        say("Event " + ev + " on " + file + ". Rebuilding.");
        invoke('build');
      });
    });
  });
  task('linkdeps', 'Link the fuck out of the deps', function(){
    var libDeps, lib, deps, i$, len$, dep;
    libDeps = {
      autolink: ['ajax'],
      "parse-time": ['lang']
    };
    for (lib in libDeps) {
      deps = libDeps[lib];
      for (i$ = 0, len$ = deps.length; i$ < len$; ++i$) {
        dep = deps[i$];
        exec("cd lib/" + lib + " && npm link ../" + dep, fn$);
      }
    }
    function fn$(err){
      if (err) {
        blame(lib + ": " + err);
      }
    }
  });
  task('link', 'Link the fuck out of the npm modules', function(){
    var modules, i$, len$, module;
    modules = ['ajax', 'autolink', 'dom', 'fetch-siblings', 'lang', 'parse-time'];
    for (i$ = 0, len$ = modules.length; i$ < len$; ++i$) {
      module = modules[i$];
      exec("rm -rf node_modules/" + module);
      exec("npm link lib/" + module, fn$);
    }
    say("Linked " + join$.call(modules, ', ') + ".");
    function fn$(err){
      if (err) {
        blame(module + ": " + err);
      }
    }
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
